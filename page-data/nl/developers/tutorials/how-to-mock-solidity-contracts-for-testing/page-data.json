{
    "componentChunkName": "component---src-templates-tutorial-js",
    "path": "/nl/developers/tutorials/how-to-mock-solidity-contracts-for-testing/",
    "result": {"data":{"siteData":{"siteMetadata":{"editContentUrl":"https://github.com/ethereum/ethereum-org-website/tree/dev/"}},"pageData":{"fields":{"slug":"/en/developers/tutorials/how-to-mock-solidity-contracts-for-testing/","readingTime":{"minutes":3.89}},"frontmatter":{"title":"How to mock Solidity smart contracts for testing","description":"Why you should make fun of your contracts when testing","lang":"en","tags":["solidity","smart contracts","testing","mocking"],"author":"Markus Waas","source":"soliditydeveloper.com","sourceUrl":"https://soliditydeveloper.com/mocking-contracts","skill":"intermediate","published":"2020-05-02T00:00:00.000Z","sidebar":true,"sidebarDepth":null,"address":null,"isOutdated":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to mock Solidity smart contracts for testing\",\n  \"description\": \"Why you should make fun of your contracts when testing\",\n  \"author\": \"Markus Waas\",\n  \"lang\": \"en\",\n  \"sidebar\": true,\n  \"tags\": [\"solidity\", \"smart contracts\", \"testing\", \"mocking\"],\n  \"skill\": \"intermediate\",\n  \"published\": \"2020-05-02T00:00:00.000Z\",\n  \"source\": \"soliditydeveloper.com\",\n  \"sourceUrl\": \"https://soliditydeveloper.com/mocking-contracts\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Mock_object\"\n  }, \"Mock objects\"), \" are a common design pattern in object-oriented programming. Coming from the old French word 'mocquer' with the meaning of 'making fun of', it evolved to 'imitating something real' which is actually what we are doing in programming. Please only make fun of your smart contracts if you want to, but mock them whenever you can. It makes your life easier.\"), mdx(\"h2\", {\n    \"id\": \"unit-testing-contracts-with-mocks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#unit-testing-contracts-with-mocks\",\n    \"aria-label\": \"unit testing contracts with mocks permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Unit-testing contracts with mocks\"), mdx(\"p\", null, \"Mocking a contract essentially means creating a second version of that contract which behaves very similar to the original one, but in a way that can be easily controlled by the developer. You often end up with complex contracts where you only want to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/developers/docs/smart-contracts/testing/\"\n  }, \"unit-test small parts of the contract\"), \". The problem is what if testing this small part requires a very specific contract state that is difficult to end up in?\"), mdx(\"p\", null, \"You could write complex test setup logic everytime that brings in the contract in the required state or you write a mock. Mocking a contract is easy with inheritance. Simply create a second mock contract that inherits from the original one. Now you can override functions to your mock. Let us see it with an example.\"), mdx(\"h2\", {\n    \"id\": \"example-private-erc20\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example-private-erc20\",\n    \"aria-label\": \"example private erc20 permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example: Private ERC20\"), mdx(\"p\", null, \"We use an example ERC-20 contract that has an initial private time. The owner can manage private users and only those will be allowed to receive tokens at the beginning. Once a certain time has passed, everyone will be allowed to use the tokens. If you are curious, we are using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.openzeppelin.com/contracts/3.x/extending-contracts#using-hooks\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"_beforeTokenTransfer\")), \" hook from the new OpenZeppelin contracts v3.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-solidity\"\n  }, \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PrivateERC20 is ERC20, Ownable {\\n    mapping (address => bool) public isPrivateUser;\\n    uint256 private publicAfterTime;\\n\\n    constructor(uint256 privateERC20timeInSec) ERC20(\\\"PrivateERC20\\\", \\\"PRIV\\\") public {\\n        publicAfterTime = now + privateERC20timeInSec;\\n    }\\n\\n    function addUser(address user) external onlyOwner {\\n        isPrivateUser[user] = true;\\n    }\\n\\n    function isPublic() public view returns (bool) {\\n        return now >= publicAfterTime;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(_validRecipient(to), \\\"PrivateERC20: invalid recipient\\\");\\n    }\\n\\n    function _validRecipient(address to) private view returns (bool) {\\n        if (isPublic()) {\\n            return true;\\n        }\\n\\n        return isPrivateUser[to];\\n    }\\n}\\n\")), mdx(\"p\", null, \"And now let's mock it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-solidity\"\n  }, \"pragma solidity ^0.6.0;\\nimport \\\"../PrivateERC20.sol\\\";\\n\\ncontract PrivateERC20Mock is PrivateERC20 {\\n    bool isPublicConfig;\\n\\n    constructor() public PrivateERC20(0) {}\\n\\n    function setIsPublic(bool isPublic) external {\\n        isPublicConfig = isPublic;\\n    }\\n\\n    function isPublic() public view returns (bool) {\\n        return isPublicConfig;\\n    }\\n}\\n\")), mdx(\"p\", null, \"You will get one of the following error messages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PrivateERC20Mock.sol: TypeError: Overriding function is missing \\\"override\\\" specifier.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PrivateERC20.sol: TypeError: Trying to override non-virtual function. Did you forget to add \\\"virtual\\\"?.\"))), mdx(\"p\", null, \"Since we are using the new 0.6 Solidity version, we have to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"virtual\"), \" keyword for functions that can be overriden and override for the overriding function. So let us add those to both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isPublic\"), \" functions.\"), mdx(\"p\", null, \"Now in your unit tests, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrivateERC20Mock\"), \" instead. When you want to test the behaviour during the private usage time, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setIsPublic(false)\"), \" and likewise \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setIsPublic(true)\"), \" for testing the public usage time. Of course in our example, we could just use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.openzeppelin.com/test-helpers/0.5/api#increase\"\n  }, \"time helpers\"), \" to change the times accordingly as well. But the idea of mocking should be clear now and you can imagine scenarios where it is not as easy as simply advancing the time.\"), mdx(\"h2\", {\n    \"id\": \"mocking-many-contracts\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#mocking-many-contracts\",\n    \"aria-label\": \"mocking many contracts permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Mocking many contracts\"), mdx(\"p\", null, \"It can become messy if you have to create another contract for every single mock. If this bothers you, you can take a look at the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gnosis/mock-contract\"\n  }, \"MockContract\"), \" library. It allows you to override and change behaviours of contracts on-the-fly. However, it works only for mocking calls to another contract, so it would not work for our example.\"), mdx(\"h2\", {\n    \"id\": \"mocking-can-be-even-more-powerful\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#mocking-can-be-even-more-powerful\",\n    \"aria-label\": \"mocking can be even more powerful permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Mocking can be even more powerful\"), mdx(\"p\", null, \"The powers of mocking do not end there.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding functions: Not only overriding a specific function is useful, but also just adding additional functions. A good example for tokens is just having an additional \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mint\"), \" function to allow any user to get new tokens for free.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Usage in testnets: When you deploy and test your contracts on testnets together with your Dapp, consider using a mocked version. Avoid overriding functions unless you really have to. You want to test the real logic after all. But adding for example a reset function can be useful that simply resets the contract state to the beginning, no new deployment required. Obviously you would not want to have that in a Mainnet contract.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#unit-testing-contracts-with-mocks-unit-testing-contracts-with-mocks","title":"Unit-testing contracts with mocks {#unit-testing-contracts-with-mocks}"},{"url":"#example-private-erc20-example-private-erc20","title":"Example: Private ERC20 {#example-private-erc20}"},{"url":"#mocking-many-contracts-mocking-many-contracts","title":"Mocking many contracts {#mocking-many-contracts}"},{"url":"#mocking-can-be-even-more-powerful-mocking-can-be-even-more-powerful","title":"Mocking can be even more powerful {#mocking-can-be-even-more-powerful}"}]}}},"pageContext":{"slug":"/nl/developers/tutorials/how-to-mock-solidity-contracts-for-testing/","ignoreTranslationBanner":false,"isOutdated":false,"isContentEnglish":true,"relativePath":"src/content/developers/tutorials/how-to-mock-solidity-contracts-for-testing/index.md","intl":{"language":"nl","defaultLanguage":"en","languages":["en","ar","bg","bn","ca","cs","de","el","es","fa","fi","fr","hi","hr","hu","id","ig","it","ja","ko","lt","ml","nl","nb","pl","pt","pt-br","ro","ru","se","sk","sl","tr","uk","vi","zh","zh-tw"],"messages":{"about-ethereum-org":"Over ethereum.org","about-us":"Over ons","community":"Community","contact":"Contact","contributing":"Bijdragen","cookie-policy":"Cookiebeleid","decentralized-applications-dapps":"Gedecentraliseerde toepassingen (dapps)","developers":"Ontwikkelaars","developers-home":"Startpagina voor ontwikkelaars","documentation":"Documentatie","ef-blog":"Ethereum Foundation-blog","eips":"Voorstellen voor verbetering van Ethereum","ethereum":"Ethereum","ethereum-2-0":"Ethereum 2.0","ethereum-brand-assets":"Ethereum-merkcontent","ethereum-community":"Ethereum-community","ethereum-glossary":"Ethereum-glossary","ethereum-wallets":"Ethereum Wallets","ethereum-whitepaper":"Ethereum-whitepaper","get-eth":"ETH verkrijgen","get-started":"Aan de slag","guides-and-resources":"Handleidingen en bronnen","how-ethereum-works":"Hoe Ethereum werkt","language-support":"Taalondersteuning","languages":"Talen","learn":"Info","learn-by-coding":"Leer door coderen","learn-more":"Learn more","mainnet-ethereum":"Mainnet Ethereum","nav-beginners":"Beginners","page-enterprise":"Onderneming","page-index":"Ethereum","page-index-section-beginners-item-one":"Nieuw bij Ethereum?","page-index-section-beginners-item-three":"Wat heb ik eraan?","page-index-section-beginners-item-two":"Wat is Ethereum?","page-index-section-beginners-title":"Beginners","page-index-section-developers-item-one":"Snel aan de slag","page-index-section-developers-item-three":"Vind de nieuwste tools voor ontwikkelaars","page-index-section-developers-item-two":"Leer slimme contracten te programmeren","page-index-section-developers-title":"Ontwikkelaars","page-index-section-enterprise-item-one":"","page-index-section-enterprise-item-three":"","page-index-section-enterprise-item-two":"","page-index-section-enterprise-title":"","page-index-section-learn-item-one":"Beginnersinformatie","page-index-section-learn-item-three":"ETH 2.0","page-index-section-use-item-one":"Wat kan ik nu doen met Ethereum?","page-index-section-use-item-three":"Wat is een 'wallet' of digitale portemonnee?","page-index-section-use-item-two":"Hoe krijg ik ether?","page-index-section-use-title":"Gebruik","page-last-updated":"Pagina laatst bijgewerkt","privacy-policy":"Privacybeleid","private-ethereum":"Private Ethereum","search":"Zoeken","set-up-local-env":"Lokale omgeving instellen","stablecoins":"Stablecoins","terms-of-use":"Gebruiksvoorwaarden","translation-banner-body-new":"Je bekijkt deze pagina in het Engels omdat we hem nog niet hebben vertaald. Help ons deze inhoud te vertalen.","translation-banner-body-update":"Er is een nieuwe versie van deze pagina, maar die is momenteel alleen in het Engels. Help ons de nieuwste versie te vertalen.","translation-banner-button-join-translation-program":"Deelnemen aan vertaalteam","translation-banner-button-learn-more":"Meer informatie","translation-banner-button-see-english":"Bekijk in het Engels","translation-banner-button-translate-page":"Pagina vertalen","translation-banner-title-new":"Help deze pagina te vertalen","translation-banner-title-update":"Help deze pagina te updaten","tutorials":"Tutorials","use":"Gebruik","use-ethereum":"Ethereum gebruiken","website-last-updated":"Website laatst bijgewerkt","what-is-ether":"Wat is ether (ETH)?","what-is-ethereum":"Wat is Ethereum?","page-developer-meta-title":"Bronnen voor Ethereum-ontwikkelaars","page-developers-about":"Over deze bronnen voor ontwikkelaars","page-developers-about-desc":"ethereum.org helpt je met het bouwen op Ethereum met behulp van documentatie over fundamentele concepten en de ontwikkelingsstack. Daarnaast zijn er handleidingen om je op weg te helpen.","page-developers-about-desc-2":"Geïnspireerd door het Mozilla Developer Network, leek het ons een goed idee om Ethereum een plek te geven voor geweldige ontwikkelaarsinhoud en bronnen. Net als onze vrienden bij Mozilla, is hier alles open source, klaar om uit te breiden en te verbeteren.","page-developers-account-desc":"Contracts of mensen op het netwerk","page-developers-accounts-link":"Accounts","page-developers-advanced":"Geavanceerd","page-developers-api-desc":"Bibliotheken gebruiken voor interactie met Smart Contracts","page-developers-api-link":"Backend API's","page-developers-aria-label":"Menu voor ontwikkelaars","page-developers-block-desc":"Batches van aan de blockchain toegevoegde transacties","page-developers-block-explorers-desc":"Je portaal naar Ethereum-gegevens","page-developers-block-explorers-link":"Block explorers","page-developers-blocks-link":"Blocks","page-developers-browse-tutorials":"Blader door handleidingen","page-developers-choose-stack":"Kies je stack","page-developers-contribute":"Bijdragen","page-developers-dev-env-desc":"IDE's die geschikt zijn voor het ontwikkelen van dapps","page-developers-dev-env-link":"Ontwikkelomgevingen","page-developers-discord":"Open Discord","page-developers-docs-introductions":"Introductie","page-developers-evm-desc":"De computer die transacties verwerkt","page-developers-evm-link":"De EVM (Ethereum Virtual Machine)","page-developers-explore-documentation":"Bekijk de documentatie","page-developers-feedback":"Heb je feedback, neem dan contact met ons op via een GitHub-case of op onze Discord-server.","page-developers-frameworks-desc":"Tools om ontwikkeling te versnellen","page-developers-frameworks-link":"Ontwikkelingskaders","page-developers-fundamentals":"Basisprincipes","page-developers-gas-desc":"Ether nodig om transacties uit te voeren","page-developers-gas-link":"Brandstof","page-developers-get-started":"Hoe wil je beginnen?","page-developers-improve-ethereum":"Help ons ethereum.org beter te maken","page-developers-improve-ethereum-desc":"Net als ethereum.org, zijn deze documenten een gezamenlijke inspanning. Dien een PR in als je fouten, ruimte voor verbetering of nieuwe mogelijkheden ziet om Ethereum-ontwikkelaars te helpen.","page-developers-into-eth-desc":"Een introductie voor blockchain en Ethereum","page-developers-intro-dapps-desc":"Een introductie voor gedecentraliseerde toepassingen","page-developers-intro-dapps-link":"Intro voor dapps","page-developers-intro-eth-link":"Intro voor Ethereum","page-developers-intro-stack":"Intro voor de stack","page-developers-intro-stack-desc":"Een introductie voor de Ethereum-stack","page-developers-js-libraries-desc":"Javascript gebruiken om te communiceren met Smart Contracts","page-developers-js-libraries-link":"Javascript-bibliotheken","page-developers-language-desc":"Ethereum gebruiken met bekende talen","page-developers-languages":"Programmeertalen","page-developers-learn":"Leer meer over de ontwikkeling van Ethereum","page-developers-learn-desc":"Lees meer over kernbegrippen en de Ethereum-stack in onze documenten","page-developers-learn-tutorials":"Leer meer in de handleidingen","page-developers-learn-tutorials-cta":"Handleidingen weergeven","page-developers-learn-tutorials-desc":"Leer stap voor stap Ethereum ontwikkelen van makers die je zijn voorgegaan.","page-developers-meta-desc":"Documentatie, handleidingen en tools voor ontwikkelaars die bouwen op Ethereum.","page-developers-mining-desc":"Hoe nieuwe blocks worden gemaakt en consensus wordt bereikt","page-developers-mining-link":"Mining","page-developers-networks-desc":"Een overzicht van Mainnet en de testnetwerken","page-developers-networks-link":"Netwerken","page-developers-node-clients-desc":"Hoe blocks en transacties in het netwerk worden geverifieerd","page-developers-node-clients-link":" Nodes en clients","page-developers-oracle-desc":"Off-chain gegevens in uw Smarts Contracts verwerken","page-developers-oracles-link":"Oracles","page-developers-play-code":"Spelen met code","page-developers-read-docs":"Lees de documentatie","page-developers-scaling-desc":"Oplossingen voor snellere transacties","page-developers-scaling-link":"Schalen","page-developers-smart-contract-security-desc":"Beveiligingsmaatregelen die tijdens het ontwikkelen in acht moeten worden genomen","page-developers-smart-contract-security-link":"Beveiliging","page-developers-set-up":"Lokale omgeving instellen","page-developers-setup-desc":"Bereid je stack voor om te bouwen door het configureren van een ontwikkelomgeving.","page-developers-smart-contracts-desc":"De logica achter dapps – zelf-uitvoerende overeenkomsten","page-developers-smart-contracts-link":"Smart Contracts","page-developers-stack":"De stack","page-developers-start":"Begin te experimenteren","page-developers-start-desc":"Wil je eerst experimenteren en pas later vragen stellen?","page-developers-storage-desc":"Leren omgaan met dapp-opslag","page-developers-storage-link":"Opslag","page-developers-subtitle":"Een handleiding voor het bouwen met Ethereum. Door ontwikkelaars, voor ontwikkelaars.","page-developers-title-1":"Ethereum","page-developers-title-2":"ontwikkelaar","page-developers-title-3":"bronnen","page-developers-token-standards-desc":"Een overzicht van geaccepteerde standaarden voor tokens","page-developers-token-standards-link":"Standaarden voor tokens","page-developers-transactions-desc":"Hoe de Ethereum-status verandert","page-developers-transactions-link":"Transacties","page-developers-web3-desc":"In hoeverre de web3-wereld van ontwikkelen anders is","page-developers-web3-link":"Web2 versus Web3","page-index-hero-image-alt":"ethereum.org hero image","page-index-meta-description":"Ethereum is een wereldwijd, gedecentraliseerd platform voor geld en nieuwe soorten toepassingen. Op Ethereum kun je code schrijven die geld controleert en toepassingen bouwen die overal ter wereld toegankelijk zijn.","page-index-meta-title":"Home","page-index-sections-developers-desc":"Leer meer over de technologie achter Ethereum en de bijbehorende toepassingen, zodat je ermee kunt gaan bouwen.","page-index-sections-developers-image-alt":"Illustratie van een hand die een Ethereum-glief bouwt van legosteentjes","page-index-sections-developers-link-text":"Start met bouwen","page-index-sections-developers-title":"Ontwikkelaars","page-index-sections-enterprise-desc":"Zie hoe je met Ethereum nieuwe bedrijfsmodellen kunt openen, je kosten verder kunt terugdringen en je bedrijf klaar kunt maken voor de toekomst.","page-index-sections-enterprise-image-alt":"Illustratie van een groep die werkt aan een Ethereum-project rond een laptop","page-index-sections-enterprise-link-text":"Ethereum voor ondernemingen","page-index-sections-enterprise-title":"Onderneming","page-index-sections-individuals-desc":"Kom meer te weten over Ethereum, Ether, wallets en tokens, zodat je Ethereum-applicaties kunt gaan gebruiken.","page-index-sections-individuals-image-alt":"Illustratie van een hond achter een computer","page-index-sections-individuals-link-text":"Aan de slag met Ethereum","page-index-sections-individuals-title":"Over Ethereum","page-index-subtitle":"Op Ethereum kun je code schrijven waarmee digitale waarde wordt beheerd. Het werkt precies zoals het is geprogrammeerd en is overal ter wereld toegankelijk.","page-index-title":"Ethereum is een wereldwijd, open-source platform voor gedecentraliseerde toepassingen."},"routed":true,"originalPath":"/developers/tutorials/how-to-mock-solidity-contracts-for-testing/","redirect":false}}},
    "staticQueryHashes": ["1011117294","3003422828","4096231394"]}