{
    "componentChunkName": "component---src-templates-tutorial-js",
    "path": "/nl/developers/tutorials/erc-721-vyper-annotated-code/",
    "result": {"data":{"siteData":{"siteMetadata":{"editContentUrl":"https://github.com/ethereum/ethereum-org-website/tree/dev/"}},"pageData":{"fields":{"slug":"/en/developers/tutorials/erc-721-vyper-annotated-code/","readingTime":{"minutes":20.275}},"frontmatter":{"title":"Vyper ERC-721 Contract Walkthrough","description":"Ryuya Nakamura's ERC-721 contract and how it works","lang":"en","tags":["vyper","erc-721","python"],"author":"Ori Pomerantz","source":null,"sourceUrl":null,"skill":"beginner","published":"2021-04-01T00:00:00.000Z","sidebar":true,"sidebarDepth":null,"address":null,"isOutdated":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Vyper ERC-721 Contract Walkthrough\",\n  \"description\": \"Ryuya Nakamura's ERC-721 contract and how it works\",\n  \"author\": \"Ori Pomerantz\",\n  \"lang\": \"en\",\n  \"sidebar\": true,\n  \"tags\": [\"vyper\", \"erc-721\", \"python\"],\n  \"skill\": \"beginner\",\n  \"published\": \"2021-04-01T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/developers/docs/standards/tokens/erc-721/\"\n  }, \"ERC-721\"), \" standard is used to hold the ownership of Non-Fungible Tokens (NFT).\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/developers/docs/standards/tokens/erc-20/\"\n  }, \"ERC-20\"), \" tokens behave as a commodity, because there is no difference between individual tokens.\\nIn contrast to that, ERC-721 tokens are designed for assets that are similar but not identical, such as different \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.cryptokitties.co/\"\n  }, \"cat\\ncartoons\"), \"\\nor titles to different pieces of real estate.\"), mdx(\"p\", null, \"In this article we will analyze \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/vyperlang/vyper/blob/master/examples/tokens/ERC721.vy\"\n  }, \"Ryuya Nakamura's ERC-721 contract\"), \".\\nThis contract is written in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vyper.readthedocs.io/en/latest/index.html\"\n  }, \"Vyper\"), \", a Python-like contract language designed to make\\nit harder to write insecure code than it is in Solidity.\"), mdx(\"h2\", {\n    \"id\": \"contract\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#contract\",\n    \"aria-label\": \"contract permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"The Contract\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev Implementation of ERC-721 non-fungible token standard.\\n# @author Ryuya Nakamura (@nrryuya)\\n# Modified from: https://github.com/vyperlang/vyper/blob/de74722bf2d8718cca46902be165f9fe0e3641dd/examples/tokens/ERC721.vy\\n\")), mdx(\"p\", null, \"Comments in Vyper, as in Python, start with a hash (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#\"), \") and continue to the end of the line. Comments that include\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@<keyword>\"), \" are used by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vyper.readthedocs.io/en/latest/natspec.html\"\n  }, \"NatSpec\"), \" to produce human-readable\\ndocumentation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from vyper.interfaces import ERC721\\n\\nimplements: ERC721\\n\")), mdx(\"p\", null, \"The ERC-721 interface is built into the Vyper language.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/vyperlang/vyper/blob/master/vyper/interfaces/ERC721.py\"\n  }, \"You can see the code definition here\"), \".\\nThe interface definition is written in Python, rather than Vyper, because interfaces are used not only within the\\nblockchain, but also when sending the blockchain a transaction from an external client, which may be written in\\nPython.\"), mdx(\"p\", null, \"The first line imports the interface, and the second specifies that we are implementing it here.\"), mdx(\"h3\", {\n    \"id\": \"receiver-interface\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#receiver-interface\",\n    \"aria-label\": \"receiver interface permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"The ERC721Receiver Interface\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# Interface for the contract called by safeTransferFrom()\\ninterface ERC721Receiver:\\n    def onERC721Received(\\n\")), mdx(\"p\", null, \"ERC-721 supports two types of transfer:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transferFrom\"), \", which lets the sender specify any destination address and places the responsibility\\nfor the transfer on the sender. This means that you can transfer to an invalid address, in which case\\nthe NFT is lost for good.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"safeTransferFrom\"), \", which checks if the destination address is a contract. If so, the ERC-721 contract\\nasks the receiving contract if it wants to receive the NFT.\")), mdx(\"p\", null, \"To answer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"safeTransferFrom\"), \" requests a receiving contract has to implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ERC721Receiver\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"            _operator: address,\\n            _from: address,\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_from\"), \" address is the current owner of the token. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_operator\"), \" address is the one that\\nrequested the transfer (those two may not be the same, because of allowances).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"            _tokenId: uint256,\\n\")), mdx(\"p\", null, \"ERC-721 token IDs are 256 bits. Typically they are created by hashing a description of whatever\\nthe token represents.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"            _data: Bytes[1024]\\n\")), mdx(\"p\", null, \"The request can have up to 1024 bytes of user data.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"        ) -> bytes32: view\\n\")), mdx(\"p\", null, \"To prevent cases in which a contract accidentally accepts a transfer the return value is not a boolean,\\nbut 256 bits with a specific value.\"), mdx(\"p\", null, \"This function is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"view\"), \", which means it can read the state of the blockchain, but not modify it.\"), mdx(\"h3\", {\n    \"id\": \"events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#events\",\n    \"aria-label\": \"events permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Events\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://media.consensys.net/technical-introduction-to-events-and-logs-in-ethereum-a074d65dd61e\"\n  }, \"Events\"), \"\\nare emitted to inform users and servers outside of the blockchain of events. Note that the content of events\\nis not available to contracts on the blockchain.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\\n#      created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\\n#      number of NFTs may be created and assigned without emitting Transfer. At the time of any\\n#      transfer, the approved address for that NFT (if any) is reset to none.\\n# @param _from Sender of NFT (if address is zero address it indicates token creation).\\n# @param _to Receiver of NFT (if address is zero address it indicates token destruction).\\n# @param _tokenId The NFT that got transfered.\\nevent Transfer:\\n    sender: indexed(address)\\n    receiver: indexed(address)\\n    tokenId: indexed(uint256)\\n\")), mdx(\"p\", null, \"This is similar to the ERC-20 Transfer event, except that we report a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tokenId\"), \" instead of an amount.\\nNobody owns address zero, so by convention we use it to report creation and destruction of tokens.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\\n#      address indicates there is no approved address. When a Transfer event emits, this also\\n#      indicates that the approved address for that NFT (if any) is reset to none.\\n# @param _owner Owner of NFT.\\n# @param _approved Address that we are approving.\\n# @param _tokenId NFT which we are approving.\\nevent Approval:\\n    owner: indexed(address)\\n    approved: indexed(address)\\n    tokenId: indexed(uint256)\\n\")), mdx(\"p\", null, \"An ERC-721 approval is similar to an ERC-20 allowance. A specific address is allowed to transfer a specific\\ntoken. This gives a mechanism for contracts to respond when they accept a token. Contracts cannot\\nlisten for events, so if you just transfer the token to them they don't \\\"know\\\" about it. This way the\\nowner first submits an approval and then sends a request to the contract: \\\"I approved for you to transfer token\\nX, please do ...\\\".\"), mdx(\"p\", null, \"This is a design choice to make the ERC-721 standard similar to the ERC-20 standard. Because\\nERC-721 tokens are not fungible, a contract can also identify that it got a specific token by\\nlooking at the token's ownership.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\\n#      all NFTs of the owner.\\n# @param _owner Owner of NFT.\\n# @param _operator Address to which we are setting operator rights.\\n# @param _approved Status of operator rights(true if operator rights are given and false if\\n# revoked).\\nevent ApprovalForAll:\\n    owner: indexed(address)\\n    operator: indexed(address)\\n    approved: bool\\n\")), mdx(\"p\", null, \"It is sometimes useful to have an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"operator\"), \" that can manage all of an account's tokens of a specific type (those that are managed by\\na specific contract), similar to a power of attorney. For example, I might want to give such a power to a contract that checks if\\nI haven't contacted it for six months, and if so distributes my assets to my heirs (if one of them asks for it, contracts\\ncan't do anything without being called by a transaction). In ERC-20 we can just give a high allowance to an inheritance contract,\\nbut that doesn't work for ERC-721 because the tokens are not fungible. This is the equivalent.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"approved\"), \" value tells us whether the event is for an approval, or the withdrawal of an approval.\"), mdx(\"h3\", {\n    \"id\": \"state-vars\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#state-vars\",\n    \"aria-label\": \"state vars permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"State Variables\"), mdx(\"p\", null, \"These variables contain the current state of the tokens: which ones are available and who owns them. Most of these\\nare \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \" objects, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vyper.readthedocs.io/en/latest/types.html#mappings\"\n  }, \"unidirectional mappings that exist between two types\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev Mapping from NFT ID to the address that owns it.\\nidToOwner: HashMap[uint256, address]\\n\\n# @dev Mapping from NFT ID to approved address.\\nidToApprovals: HashMap[uint256, address]\\n\")), mdx(\"p\", null, \"User and contract identities in Ethereum are represented by 160-bit addresses. These two variables map\\nfrom token IDs to their owners and those approved to transfer them (at a maximum of one for each). In Ethereum,\\nuninitialized data is always zero, so if there is no owner or approved transferor the value for that token\\nis zero.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev Mapping from owner address to count of his tokens.\\nownerToNFTokenCount: HashMap[address, uint256]\\n\")), mdx(\"p\", null, \"This variable holds the count of tokens for each owner. There is no mapping from owners to tokens, so\\nthe only way to identify the tokens that a specific owner owns is to look back in the blockchain's event history\\nand see the appropriate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Transfer\"), \" events. We can use this variable to know when we have all the NFTs and don't\\nneed to look even further in time.\"), mdx(\"p\", null, \"Note that this algorithm only works for user interfaces and external servers. Code running on the blockchain\\nitself cannot read past events.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev Mapping from owner address to mapping of operator addresses.\\nownerToOperators: HashMap[address, HashMap[address, bool]]\\n\")), mdx(\"p\", null, \"An account may have more than a single operator. A simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \" is insufficient to\\nkeep track of them, because each key leads to a single value. Instead, you can use\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HashMap[address, bool]\"), \" as the value. By default the value for each address is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"False\"), \", which means it\\nis not an operator. You can set values to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"True\"), \" as needed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev Address of minter, who can mint a token\\nminter: address\\n\")), mdx(\"p\", null, \"New tokens have to be created somehow. In this contract there is a single entity that is allowed to do so, the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minter\"), \". This is likely to be sufficient for a game, for example. For other purposes, it might be necessary\\nto create a more complicated business logic.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# @dev Mapping of interface id to bool about whether or not it's supported\\nsupportedInterfaces: HashMap[bytes32, bool]\\n\\n# @dev ERC165 interface ID of ERC165\\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\\n\\n# @dev ERC165 interface ID of ERC721\\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eips.ethereum.org/EIPS/eip-165\"\n  }, \"ERC-165\"), \" specifies a mechanism for a contract to disclose how applications\\ncan communicate with it, to which ERCs it conforms. In this case, the contract conforms to ERC-165 and ERC-721.\"), mdx(\"h3\", {\n    \"id\": \"functions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#functions\",\n    \"aria-label\": \"functions permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Functions\"), mdx(\"p\", null, \"These are the functions that actually implement ERC-721.\"), mdx(\"h4\", {\n    \"id\": \"constructor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#constructor\",\n    \"aria-label\": \"constructor permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Constructor\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@external\\ndef __init__():\\n\")), mdx(\"p\", null, \"In Vyper, as in Python, the constructor function is called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__init__\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    \\\"\\\"\\\"\\n    @dev Contract constructor.\\n    \\\"\\\"\\\"\\n\")), mdx(\"p\", null, \"In Python, and in Vyper, you can also create a comment by specifying a multi-line string (which starts and ends\\nwith \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\\\"\\\"\"), \"), and not using it in any way. These comments can also include\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vyper.readthedocs.io/en/latest/natspec.html\"\n  }, \"NatSpec\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\\n    self.minter = msg.sender\\n\")), mdx(\"p\", null, \"To access state variables you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.<variable name>\"), \" (again, same as in Python).\"), mdx(\"h4\", {\n    \"id\": \"views\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#views\",\n    \"aria-label\": \"views permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"View Functions\"), mdx(\"p\", null, \"These are functions that do not modify the state of the blockchain, and therefore can be executed for\\nfree if they are called externally. If the view functions are called by a contract they still have to be executed on\\nevery node and therefore cost gas.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@view\\n@external\\n\")), mdx(\"p\", null, \"These keywords prior to a function definition that start with an at sign (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@\"), \") are called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"decorations\"), \". They\\nspecify the circumstances in which a function can be called.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@view\"), \" specifies that this function is a view.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@external\"), \" specifies that this particular function can be called by transactions and by other contracts.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def supportsInterface(_interfaceID: bytes32) -> bool:\\n\")), mdx(\"p\", null, \"In contrast to Python, Vyper is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Type_system#Static_type_checking\"\n  }, \"static typed language\"), \".\\nYou can't declare a variable, or a function parameter, without identifying the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vyper.readthedocs.io/en/latest/types.html\"\n  }, \"data\\ntype\"), \". In this case the input parameter is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bytes32\"), \", a 256-bit value\\n(256 bits is the native word size of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/developers/docs/evm/\"\n  }, \"Ethereum Virtual Machine\"), \"). The output is a boolean\\nvalue. By convention, the names of function parameters start with an underscore (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    \\\"\\\"\\\"\\n    @dev Interface identification is specified in ERC-165.\\n    @param _interfaceID Id of the interface\\n    \\\"\\\"\\\"\\n    return self.supportedInterfaces[_interfaceID]\\n\")), mdx(\"p\", null, \"Return the value from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.supportedInterfaces\"), \" HashMap, which is set in the constructor (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__init__\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"### VIEW FUNCTIONS ###\\n\")), mdx(\"p\", null, \"These are the view functions that make information about the tokens available to users and other contracts.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@view\\n@external\\ndef balanceOf(_owner: address) -> uint256:\\n    \\\"\\\"\\\"\\n    @dev Returns the number of NFTs owned by `_owner`.\\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n    @param _owner Address for whom to query the balance.\\n    \\\"\\\"\\\"\\n    assert _owner != ZERO_ADDRESS\\n\")), mdx(\"p\", null, \"This line \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vyper.readthedocs.io/en/latest/statements.html#assert\"\n  }, \"asserts\"), \" that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_owner\"), \" is not\\nzero. If it is, there is an error and the operation is reverted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    return self.ownerToNFTokenCount[_owner]\\n\\n@view\\n@external\\ndef ownerOf(_tokenId: uint256) -> address:\\n    \\\"\\\"\\\"\\n    @dev Returns the address of the owner of the NFT.\\n         Throws if `_tokenId` is not a valid NFT.\\n    @param _tokenId The identifier for an NFT.\\n    \\\"\\\"\\\"\\n    owner: address = self.idToOwner[_tokenId]\\n    # Throws if `_tokenId` is not a valid NFT\\n    assert owner != ZERO_ADDRESS\\n    return owner\\n\")), mdx(\"p\", null, \"In the Ethereum Virtual Machine (evm) any storage that does not have a value stored in it is zero.\\nIf there is no token at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_tokenId\"), \" then the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.idToOwner[_tokenId]\"), \" is zero. In that\\ncase the function reverts.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@view\\n@external\\ndef getApproved(_tokenId: uint256) -> address:\\n    \\\"\\\"\\\"\\n    @dev Get the approved address for a single NFT.\\n         Throws if `_tokenId` is not a valid NFT.\\n    @param _tokenId ID of the NFT to query the approval of.\\n    \\\"\\\"\\\"\\n    # Throws if `_tokenId` is not a valid NFT\\n    assert self.idToOwner[_tokenId] != ZERO_ADDRESS\\n    return self.idToApprovals[_tokenId]\\n\")), mdx(\"p\", null, \"Note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getApproved\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" return zero. If the token is valid it returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.idToApprovals[_tokenId]\"), \".\\nIf there is no approver that value is zero.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@view\\n@external\\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\\n    \\\"\\\"\\\"\\n    @dev Checks if `_operator` is an approved operator for `_owner`.\\n    @param _owner The address that owns the NFTs.\\n    @param _operator The address that acts on behalf of the owner.\\n    \\\"\\\"\\\"\\n    return (self.ownerToOperators[_owner])[_operator]\\n\")), mdx(\"p\", null, \"This function checks if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_operator\"), \" is allowed to manage all of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_owner\"), \"'s tokens in this contract.\\nBecause there can be multiple operators, this is a two level HashMap.\"), mdx(\"h4\", {\n    \"id\": \"transfer-helpers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#transfer-helpers\",\n    \"aria-label\": \"transfer helpers permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transfer Helper Functions\"), mdx(\"p\", null, \"These functions implement operations that are part of transferring or managing tokens.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"\\n### TRANSFER FUNCTION HELPERS ###\\n\\n@view\\n@internal\\n\")), mdx(\"p\", null, \"This decoration, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@internal\"), \", means that the function is only accessible from other functions within the\\nsame contract. By convention, these function names also start with an underscore (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\\n    \\\"\\\"\\\"\\n    @dev Returns whether the given spender can transfer a given token ID\\n    @param spender address of the spender to query\\n    @param tokenId uint256 ID of the token to be transferred\\n    @return bool whether the msg.sender is approved for the given token ID,\\n        is an operator of the owner, or is the owner of the token\\n    \\\"\\\"\\\"\\n    owner: address = self.idToOwner[_tokenId]\\n    spenderIsOwner: bool = owner == _spender\\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\\n\")), mdx(\"p\", null, \"There are three ways in which an address can be allowed to transfer a token:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The address is the owner of the token\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The address is approved to spend that token\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The address is an operator for the owner of the token\")), mdx(\"p\", null, \"The function above can be a view because it doesn't change the state. To reduce operating costs, any\\nfunction that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" be a view \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"should\"), \" be a view.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@internal\\ndef _addTokenTo(_to: address, _tokenId: uint256):\\n    \\\"\\\"\\\"\\n    @dev Add a NFT to a given address\\n         Throws if `_tokenId` is owned by someone.\\n    \\\"\\\"\\\"\\n    # Throws if `_tokenId` is owned by someone\\n    assert self.idToOwner[_tokenId] == ZERO_ADDRESS\\n    # Change the owner\\n    self.idToOwner[_tokenId] = _to\\n    # Change count tracking\\n    self.ownerToNFTokenCount[_to] += 1\\n\\n\\n@internal\\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\\n    \\\"\\\"\\\"\\n    @dev Remove a NFT from a given address\\n         Throws if `_from` is not the current owner.\\n    \\\"\\\"\\\"\\n    # Throws if `_from` is not the current owner\\n    assert self.idToOwner[_tokenId] == _from\\n    # Change the owner\\n    self.idToOwner[_tokenId] = ZERO_ADDRESS\\n    # Change count tracking\\n    self.ownerToNFTokenCount[_from] -= 1\\n\")), mdx(\"p\", null, \"When there's a problem with a transfer we revert the call.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@internal\\ndef _clearApproval(_owner: address, _tokenId: uint256):\\n    \\\"\\\"\\\"\\n    @dev Clear an approval of a given address\\n         Throws if `_owner` is not the current owner.\\n    \\\"\\\"\\\"\\n    # Throws if `_owner` is not the current owner\\n    assert self.idToOwner[_tokenId] == _owner\\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\\n        # Reset approvals\\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\\n\")), mdx(\"p\", null, \"Only change the value if necessary. State variables live in storage. Writing to storage is\\none of the most expensive operations the EVM (Ethereum Virtual Machine) does (in terms of\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/developers/docs/gas/\"\n  }, \"gas\"), \"). Therefore, it is a good idea to minimize it, even writing the\\nexisting value has a high cost.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@internal\\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\\n    \\\"\\\"\\\"\\n    @dev Exeute transfer of a NFT.\\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\\n         Throws if `_to` is the zero address.\\n         Throws if `_from` is not the current owner.\\n         Throws if `_tokenId` is not a valid NFT.\\n    \\\"\\\"\\\"\\n\")), mdx(\"p\", null, \"We have this internal function because there are two ways to transfer tokens (regular and safe), but\\nwe want only a single location in the code where we do it to make auditing easier.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    # Check requirements\\n    assert self._isApprovedOrOwner(_sender, _tokenId)\\n    # Throws if `_to` is the zero address\\n    assert _to != ZERO_ADDRESS\\n    # Clear approval. Throws if `_from` is not the current owner\\n    self._clearApproval(_from, _tokenId)\\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\\n    self._removeTokenFrom(_from, _tokenId)\\n    # Add NFT\\n    self._addTokenTo(_to, _tokenId)\\n    # Log the transfer\\n    log Transfer(_from, _to, _tokenId)\\n\")), mdx(\"p\", null, \"To emit an event in Vyper you use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log\"), \" statement (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vyper.readthedocs.io/en/latest/event-logging.html#event-logging\"\n  }, \"see here for more details\"), \").\"), mdx(\"h4\", {\n    \"id\": \"transfer-funs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#transfer-funs\",\n    \"aria-label\": \"transfer funs permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transfer Functions\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"\\n### TRANSFER FUNCTIONS ###\\n\\n@external\\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\\n    \\\"\\\"\\\"\\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n         address for this NFT.\\n         Throws if `_from` is not the current owner.\\n         Throws if `_to` is the zero address.\\n         Throws if `_tokenId` is not a valid NFT.\\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n            they maybe be permanently lost.\\n    @param _from The current owner of the NFT.\\n    @param _to The new owner.\\n    @param _tokenId The NFT to transfer.\\n    \\\"\\\"\\\"\\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\\n\")), mdx(\"p\", null, \"This function lets you transfer to an arbitrary address. Unless the address is a user, or a contract that\\nknows how to transfer tokens, any token you transfer will be stuck in that address and useless.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@external\\ndef safeTransferFrom(\\n        _from: address,\\n        _to: address,\\n        _tokenId: uint256,\\n        _data: Bytes[1024]=b\\\"\\\"\\n    ):\\n    \\\"\\\"\\\"\\n    @dev Transfers the ownership of an NFT from one address to another address.\\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n         approved address for this NFT.\\n         Throws if `_from` is not the current owner.\\n         Throws if `_to` is the zero address.\\n         Throws if `_tokenId` is not a valid NFT.\\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n         the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n         NOTE: bytes4 is represented by bytes32 with padding\\n    @param _from The current owner of the NFT.\\n    @param _to The new owner.\\n    @param _tokenId The NFT to transfer.\\n    @param _data Additional data with no specified format, sent in call to `_to`.\\n    \\\"\\\"\\\"\\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\\n\")), mdx(\"p\", null, \"It is OK to do the transfer first because if there's a problem we are going to revert anyway,\\nso everything done in the call will be cancelled.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    if _to.is_contract: # check if `_to` is a contract address\\n\")), mdx(\"p\", null, \"First check to see if the address is a contract (if it has code). If not, assume it is a user\\naddress and the user will be able to use the token or transfer it. But don't let it lull you\\ninto a false sense of security. You can lose tokens, even with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"safeTransferFrom\"), \", if you transfer\\nthem to an address for which nobody knows the private key.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\\n\")), mdx(\"p\", null, \"Call the target contract to see if it can receive ERC-721 tokens.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\\n        assert returnValue == method_id(\\\"onERC721Received(address,address,uint256,bytes)\\\", output_type=bytes32)\\n\")), mdx(\"p\", null, \"If the destination is a contract, but one that doesn't accept ERC-721 tokens (or that decided not to accept this\\nparticular transfer), revert.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"@external\\ndef approve(_approved: address, _tokenId: uint256):\\n    \\\"\\\"\\\"\\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\\n    @param _approved Address to be approved for the given NFT ID.\\n    @param _tokenId ID of the token to be approved.\\n    \\\"\\\"\\\"\\n    owner: address = self.idToOwner[_tokenId]\\n    # Throws if `_tokenId` is not a valid NFT\\n    assert owner != ZERO_ADDRESS\\n    # Throws if `_approved` is the current owner\\n    assert _approved != owner\\n\")), mdx(\"p\", null, \"By convention if you want not to have an approver you appoint the zero address, not yourself.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    # Check requirements\\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\\n    assert (senderIsOwner or senderIsApprovedForAll)\\n\")), mdx(\"p\", null, \"To set an approval you can either be the owner, or an operator authorized by the owner.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    # Set the approval\\n    self.idToApprovals[_tokenId] = _approved\\n    log Approval(owner, _approved, _tokenId)\\n\\n\\n@external\\ndef setApprovalForAll(_operator: address, _approved: bool):\\n    \\\"\\\"\\\"\\n    @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\\n    @notice This works even if sender doesn't own any tokens at the time.\\n    @param _operator Address to add to the set of authorized operators.\\n    @param _approved True if the operators is approved, false to revoke approval.\\n    \\\"\\\"\\\"\\n    # Throws if `_operator` is the `msg.sender`\\n    assert _operator != msg.sender\\n    self.ownerToOperators[msg.sender][_operator] = _approved\\n    log ApprovalForAll(msg.sender, _operator, _approved)\\n\")), mdx(\"h4\", {\n    \"id\": \"mint-burn\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#mint-burn\",\n    \"aria-label\": \"mint burn permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Mint New Tokens and Destroy Existing Ones\"), mdx(\"p\", null, \"The account that created the contract is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minter\"), \", the super user that is authorized to mint\\nnew NFTs. However, even it is not allowed to burn existing tokens. Only the owner, or an entity\\nauthorized by the owner, can do that.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"### MINT & BURN FUNCTIONS ###\\n\\n@external\\ndef mint(_to: address, _tokenId: uint256) -> bool:\\n\")), mdx(\"p\", null, \"This function always returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"True\"), \", because if the operation fails it is reverted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    \\\"\\\"\\\"\\n    @dev Function to mint tokens\\n         Throws if `msg.sender` is not the minter.\\n         Throws if `_to` is zero address.\\n         Throws if `_tokenId` is owned by someone.\\n    @param _to The address that will receive the minted tokens.\\n    @param _tokenId The token id to mint.\\n    @return A boolean that indicates if the operation was successful.\\n    \\\"\\\"\\\"\\n    # Throws if `msg.sender` is not the minter\\n    assert msg.sender == self.minter\\n\")), mdx(\"p\", null, \"Only the minter (the account that created the ERC-721 contract) can mint new tokens. This can be a\\nproblem in the future if we want to change the minter's identity. In\\na production contract you would probably want a function that allows the minter to transfer\\nminter privileges to somebody else.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    # Throws if `_to` is zero address\\n    assert _to != ZERO_ADDRESS\\n    # Add NFT. Throws if `_tokenId` is owned by someone\\n    self._addTokenTo(_to, _tokenId)\\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\\n    return True\\n\")), mdx(\"p\", null, \"By convention, the minting of new tokens counts as a transfer from address zero.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"\\n@external\\ndef burn(_tokenId: uint256):\\n    \\\"\\\"\\\"\\n    @dev Burns a specific ERC721 token.\\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n         address for this NFT.\\n         Throws if `_tokenId` is not a valid NFT.\\n    @param _tokenId uint256 id of the ERC721 token to be burned.\\n    \\\"\\\"\\\"\\n    # Check requirements\\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\\n    owner: address = self.idToOwner[_tokenId]\\n    # Throws if `_tokenId` is not a valid NFT\\n    assert owner != ZERO_ADDRESS\\n    self._clearApproval(owner, _tokenId)\\n    self._removeTokenFrom(owner, _tokenId)\\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\\n\")), mdx(\"p\", null, \"Anybody who is allowed to transfer a token is allowed to burn it. While a burn appears equivalent to\\ntransfer to the zero address, the zero address does not actually receives the token. This allows us to\\nfree up all the storage that was used for the token, which can reduce the gas cost of the transaction.\"), mdx(\"h1\", {\n    \"id\": \"using-contract\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#using-contract\",\n    \"aria-label\": \"using contract permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using this Contract\"), mdx(\"p\", null, \"In contrast to Solidity, Vyper does not have inheritance. This is a deliberate design choice to make the\\ncode clearer and therefore easier to secure. So to create your own Vyper ERC-721 contract you take \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/vyperlang/vyper/blob/master/examples/tokens/ERC721.vy\"\n  }, \"this\\ncontract\"), \" and modify it\\nto implement the business logic you want.\"), mdx(\"h1\", {\n    \"id\": \"conclusion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"header-anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Conclusion\"), mdx(\"p\", null, \"For review, here are some of the most important ideas in this contract:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To receive ERC-721 tokens with a safe transfer, contracts have to implement the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ERC721Receiver\"), \" interface.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Even if you use safe transfer, tokens can still get stuck if you send them to an address whose private key\\nis unknown.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When there is a problem with an operation it is a good idea to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"revert\"), \" the call, rather than just return\\na failure value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ERC-721 tokens exist when they have an owner.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are three ways to be authorized to transfer an NFT. You can be the owner, be approved for a specific token,\\nor be an operator for all of the owner's tokens.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Past events are visible only outside the blockchain. Code running inside the blockchain cannot view them.\")), mdx(\"p\", null, \"Now go and implement secure Vyper contracts.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#introduction-introduction","title":"Introduction {#introduction}"},{"url":"#the-contract-contract","title":"The Contract {#contract}","items":[{"url":"#the-erc721receiver-interface-receiver-interface","title":"The ERC721Receiver Interface {#receiver-interface}"},{"url":"#events-events","title":"Events {#events}"},{"url":"#state-variables-state-vars","title":"State Variables {#state-vars}"},{"url":"#functions-functions","title":"Functions {#functions}","items":[{"url":"#constructor-constructor","title":"Constructor {#constructor}"},{"url":"#view-functions-views","title":"View Functions {#views}"},{"url":"#transfer-helper-functions-transfer-helpers","title":"Transfer Helper Functions {#transfer-helpers}"},{"url":"#transfer-functions-transfer-funs","title":"Transfer Functions {#transfer-funs}"},{"url":"#mint-new-tokens-and-destroy-existing-ones-mint-burn","title":"Mint New Tokens and Destroy Existing Ones {#mint-burn}"}]}]}]},{"url":"#using-this-contract-using-contract","title":"Using this Contract {#using-contract}"},{"url":"#conclusion-conclusion","title":"Conclusion {#conclusion}"}]}}},"pageContext":{"slug":"/nl/developers/tutorials/erc-721-vyper-annotated-code/","ignoreTranslationBanner":false,"isOutdated":false,"isContentEnglish":true,"relativePath":"src/content/developers/tutorials/erc-721-vyper-annotated-code/index.md","intl":{"language":"nl","defaultLanguage":"en","languages":["en","ar","bg","bn","ca","cs","de","el","es","fa","fi","fr","hi","hr","hu","id","ig","it","ja","ko","lt","ml","nl","nb","pl","pt","pt-br","ro","ru","se","sk","sl","tr","uk","vi","zh","zh-tw"],"messages":{"about-ethereum-org":"Over ethereum.org","about-us":"Over ons","community":"Community","contact":"Contact","contributing":"Bijdragen","cookie-policy":"Cookiebeleid","decentralized-applications-dapps":"Gedecentraliseerde toepassingen (dapps)","developers":"Ontwikkelaars","developers-home":"Startpagina voor ontwikkelaars","documentation":"Documentatie","ef-blog":"Ethereum Foundation-blog","eips":"Voorstellen voor verbetering van Ethereum","ethereum":"Ethereum","ethereum-2-0":"Ethereum 2.0","ethereum-brand-assets":"Ethereum-merkcontent","ethereum-community":"Ethereum-community","ethereum-glossary":"Ethereum-glossary","ethereum-wallets":"Ethereum Wallets","ethereum-whitepaper":"Ethereum-whitepaper","get-eth":"ETH verkrijgen","get-started":"Aan de slag","guides-and-resources":"Handleidingen en bronnen","how-ethereum-works":"Hoe Ethereum werkt","language-support":"Taalondersteuning","languages":"Talen","learn":"Info","learn-by-coding":"Leer door coderen","learn-more":"Learn more","mainnet-ethereum":"Mainnet Ethereum","nav-beginners":"Beginners","page-enterprise":"Onderneming","page-index":"Ethereum","page-index-section-beginners-item-one":"Nieuw bij Ethereum?","page-index-section-beginners-item-three":"Wat heb ik eraan?","page-index-section-beginners-item-two":"Wat is Ethereum?","page-index-section-beginners-title":"Beginners","page-index-section-developers-item-one":"Snel aan de slag","page-index-section-developers-item-three":"Vind de nieuwste tools voor ontwikkelaars","page-index-section-developers-item-two":"Leer slimme contracten te programmeren","page-index-section-developers-title":"Ontwikkelaars","page-index-section-enterprise-item-one":"","page-index-section-enterprise-item-three":"","page-index-section-enterprise-item-two":"","page-index-section-enterprise-title":"","page-index-section-learn-item-one":"Beginnersinformatie","page-index-section-learn-item-three":"ETH 2.0","page-index-section-use-item-one":"Wat kan ik nu doen met Ethereum?","page-index-section-use-item-three":"Wat is een 'wallet' of digitale portemonnee?","page-index-section-use-item-two":"Hoe krijg ik ether?","page-index-section-use-title":"Gebruik","page-last-updated":"Pagina laatst bijgewerkt","privacy-policy":"Privacybeleid","private-ethereum":"Private Ethereum","search":"Zoeken","set-up-local-env":"Lokale omgeving instellen","stablecoins":"Stablecoins","terms-of-use":"Gebruiksvoorwaarden","translation-banner-body-new":"Je bekijkt deze pagina in het Engels omdat we hem nog niet hebben vertaald. Help ons deze inhoud te vertalen.","translation-banner-body-update":"Er is een nieuwe versie van deze pagina, maar die is momenteel alleen in het Engels. Help ons de nieuwste versie te vertalen.","translation-banner-button-join-translation-program":"Deelnemen aan vertaalteam","translation-banner-button-learn-more":"Meer informatie","translation-banner-button-see-english":"Bekijk in het Engels","translation-banner-button-translate-page":"Pagina vertalen","translation-banner-title-new":"Help deze pagina te vertalen","translation-banner-title-update":"Help deze pagina te updaten","tutorials":"Tutorials","use":"Gebruik","use-ethereum":"Ethereum gebruiken","website-last-updated":"Website laatst bijgewerkt","what-is-ether":"Wat is ether (ETH)?","what-is-ethereum":"Wat is Ethereum?","page-developer-meta-title":"Bronnen voor Ethereum-ontwikkelaars","page-developers-about":"Over deze bronnen voor ontwikkelaars","page-developers-about-desc":"ethereum.org helpt je met het bouwen op Ethereum met behulp van documentatie over fundamentele concepten en de ontwikkelingsstack. Daarnaast zijn er handleidingen om je op weg te helpen.","page-developers-about-desc-2":"Geïnspireerd door het Mozilla Developer Network, leek het ons een goed idee om Ethereum een plek te geven voor geweldige ontwikkelaarsinhoud en bronnen. Net als onze vrienden bij Mozilla, is hier alles open source, klaar om uit te breiden en te verbeteren.","page-developers-account-desc":"Contracts of mensen op het netwerk","page-developers-accounts-link":"Accounts","page-developers-advanced":"Geavanceerd","page-developers-api-desc":"Bibliotheken gebruiken voor interactie met Smart Contracts","page-developers-api-link":"Backend API's","page-developers-aria-label":"Menu voor ontwikkelaars","page-developers-block-desc":"Batches van aan de blockchain toegevoegde transacties","page-developers-block-explorers-desc":"Je portaal naar Ethereum-gegevens","page-developers-block-explorers-link":"Block explorers","page-developers-blocks-link":"Blocks","page-developers-browse-tutorials":"Blader door handleidingen","page-developers-choose-stack":"Kies je stack","page-developers-contribute":"Bijdragen","page-developers-dev-env-desc":"IDE's die geschikt zijn voor het ontwikkelen van dapps","page-developers-dev-env-link":"Ontwikkelomgevingen","page-developers-discord":"Open Discord","page-developers-docs-introductions":"Introductie","page-developers-evm-desc":"De computer die transacties verwerkt","page-developers-evm-link":"De EVM (Ethereum Virtual Machine)","page-developers-explore-documentation":"Bekijk de documentatie","page-developers-feedback":"Heb je feedback, neem dan contact met ons op via een GitHub-case of op onze Discord-server.","page-developers-frameworks-desc":"Tools om ontwikkeling te versnellen","page-developers-frameworks-link":"Ontwikkelingskaders","page-developers-fundamentals":"Basisprincipes","page-developers-gas-desc":"Ether nodig om transacties uit te voeren","page-developers-gas-link":"Brandstof","page-developers-get-started":"Hoe wil je beginnen?","page-developers-improve-ethereum":"Help ons ethereum.org beter te maken","page-developers-improve-ethereum-desc":"Net als ethereum.org, zijn deze documenten een gezamenlijke inspanning. Dien een PR in als je fouten, ruimte voor verbetering of nieuwe mogelijkheden ziet om Ethereum-ontwikkelaars te helpen.","page-developers-into-eth-desc":"Een introductie voor blockchain en Ethereum","page-developers-intro-dapps-desc":"Een introductie voor gedecentraliseerde toepassingen","page-developers-intro-dapps-link":"Intro voor dapps","page-developers-intro-eth-link":"Intro voor Ethereum","page-developers-intro-stack":"Intro voor de stack","page-developers-intro-stack-desc":"Een introductie voor de Ethereum-stack","page-developers-js-libraries-desc":"Javascript gebruiken om te communiceren met Smart Contracts","page-developers-js-libraries-link":"Javascript-bibliotheken","page-developers-language-desc":"Ethereum gebruiken met bekende talen","page-developers-languages":"Programmeertalen","page-developers-learn":"Leer meer over de ontwikkeling van Ethereum","page-developers-learn-desc":"Lees meer over kernbegrippen en de Ethereum-stack in onze documenten","page-developers-learn-tutorials":"Leer meer in de handleidingen","page-developers-learn-tutorials-cta":"Handleidingen weergeven","page-developers-learn-tutorials-desc":"Leer stap voor stap Ethereum ontwikkelen van makers die je zijn voorgegaan.","page-developers-meta-desc":"Documentatie, handleidingen en tools voor ontwikkelaars die bouwen op Ethereum.","page-developers-mining-desc":"Hoe nieuwe blocks worden gemaakt en consensus wordt bereikt","page-developers-mining-link":"Mining","page-developers-networks-desc":"Een overzicht van Mainnet en de testnetwerken","page-developers-networks-link":"Netwerken","page-developers-node-clients-desc":"Hoe blocks en transacties in het netwerk worden geverifieerd","page-developers-node-clients-link":" Nodes en clients","page-developers-oracle-desc":"Off-chain gegevens in uw Smarts Contracts verwerken","page-developers-oracles-link":"Oracles","page-developers-play-code":"Spelen met code","page-developers-read-docs":"Lees de documentatie","page-developers-scaling-desc":"Oplossingen voor snellere transacties","page-developers-scaling-link":"Schalen","page-developers-smart-contract-security-desc":"Beveiligingsmaatregelen die tijdens het ontwikkelen in acht moeten worden genomen","page-developers-smart-contract-security-link":"Beveiliging","page-developers-set-up":"Lokale omgeving instellen","page-developers-setup-desc":"Bereid je stack voor om te bouwen door het configureren van een ontwikkelomgeving.","page-developers-smart-contracts-desc":"De logica achter dapps – zelf-uitvoerende overeenkomsten","page-developers-smart-contracts-link":"Smart Contracts","page-developers-stack":"De stack","page-developers-start":"Begin te experimenteren","page-developers-start-desc":"Wil je eerst experimenteren en pas later vragen stellen?","page-developers-storage-desc":"Leren omgaan met dapp-opslag","page-developers-storage-link":"Opslag","page-developers-subtitle":"Een handleiding voor het bouwen met Ethereum. Door ontwikkelaars, voor ontwikkelaars.","page-developers-title-1":"Ethereum","page-developers-title-2":"ontwikkelaar","page-developers-title-3":"bronnen","page-developers-token-standards-desc":"Een overzicht van geaccepteerde standaarden voor tokens","page-developers-token-standards-link":"Standaarden voor tokens","page-developers-transactions-desc":"Hoe de Ethereum-status verandert","page-developers-transactions-link":"Transacties","page-developers-web3-desc":"In hoeverre de web3-wereld van ontwikkelen anders is","page-developers-web3-link":"Web2 versus Web3","page-index-hero-image-alt":"ethereum.org hero image","page-index-meta-description":"Ethereum is een wereldwijd, gedecentraliseerd platform voor geld en nieuwe soorten toepassingen. Op Ethereum kun je code schrijven die geld controleert en toepassingen bouwen die overal ter wereld toegankelijk zijn.","page-index-meta-title":"Home","page-index-sections-developers-desc":"Leer meer over de technologie achter Ethereum en de bijbehorende toepassingen, zodat je ermee kunt gaan bouwen.","page-index-sections-developers-image-alt":"Illustratie van een hand die een Ethereum-glief bouwt van legosteentjes","page-index-sections-developers-link-text":"Start met bouwen","page-index-sections-developers-title":"Ontwikkelaars","page-index-sections-enterprise-desc":"Zie hoe je met Ethereum nieuwe bedrijfsmodellen kunt openen, je kosten verder kunt terugdringen en je bedrijf klaar kunt maken voor de toekomst.","page-index-sections-enterprise-image-alt":"Illustratie van een groep die werkt aan een Ethereum-project rond een laptop","page-index-sections-enterprise-link-text":"Ethereum voor ondernemingen","page-index-sections-enterprise-title":"Onderneming","page-index-sections-individuals-desc":"Kom meer te weten over Ethereum, Ether, wallets en tokens, zodat je Ethereum-applicaties kunt gaan gebruiken.","page-index-sections-individuals-image-alt":"Illustratie van een hond achter een computer","page-index-sections-individuals-link-text":"Aan de slag met Ethereum","page-index-sections-individuals-title":"Over Ethereum","page-index-subtitle":"Op Ethereum kun je code schrijven waarmee digitale waarde wordt beheerd. Het werkt precies zoals het is geprogrammeerd en is overal ter wereld toegankelijk.","page-index-title":"Ethereum is een wereldwijd, open-source platform voor gedecentraliseerde toepassingen."},"routed":true,"originalPath":"/developers/tutorials/erc-721-vyper-annotated-code/","redirect":false}}},
    "staticQueryHashes": ["1011117294","3003422828","4096231394"]}