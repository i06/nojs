{"version":3,"file":"b3b6aa1bc64b4a0dda0b36209dbd0177c5b7aeb3-d6fa9fb78311cd6d026b.js","mappings":"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","sources":["webpack://ethereum-org-website/./src/components/Breadcrumbs.js","webpack://ethereum-org-website/./src/components/PageMetadata.js"],"sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { useIntl } from \"gatsby-plugin-intl\"\n\nimport Link from \"./Link\"\nimport { translateMessageId, supportedLanguages } from \"../utils/translations\"\n\nconst Crumb = styled.h4`\n  margin: 0;\n  font-size: 14px;\n  line-height: 140%;\n  letter-spacing: 0.04em;\n  font-weight: normal;\n`\n\nconst List = styled.ul`\n  margin: 0;\n  margin-bottom: 2rem;\n  list-style-type: none;\n  display: flex;\n  flex-wrap: wrap;\n  /* Avoid header overlap: */\n  position: relative;\n  z-index: 1;\n`\n\nconst ListItem = styled.li`\n  margin: 0;\n  margin-right: 0.5rem;\n`\n\nconst Slash = styled.span`\n  margin-left: 0.5rem;\n  color: ${(props) => props.theme.colors.textTableOfContents};\n`\n\nconst CrumbLink = styled(Link)`\n  text-decoration: none;\n  color: ${(props) => props.theme.colors.textTableOfContents};\n\n  &:hover {\n    color: ${(props) => props.theme.colors.primary};\n  }\n\n  &.active {\n    color: ${(props) => props.theme.colors.primary};\n  }\n`\n\n// Generate crumbs from slug\n// e.g. \"/en/eth2/proof-of-stake/\" will generate:\n// [\n//   { fullPath: \"/en/\", text: \"HOME\" },\n//   { fullPath: \"/en/eth2/\", text: \"ETH2\" },\n//   { fullPath: \"/en/eth2/proof-of-stake/\", text: \"PROOF OF STAKE\" },\n// ]\n// `startDepth` will trim breadcrumbs\n// e.g. startDepth=1 will generate:\n// [\n//   { fullPath: \"/en/eth2/\", text: \"ETH2\" },\n//   { fullPath: \"/en/eth2/proof-of-stake/\", text: \"PROOF OF STAKE\" },\n// ]\nconst Breadcrumbs = ({ slug, startDepth = 0, className }) => {\n  const intl = useIntl()\n\n  const split = slug.split(\"/\")\n  const sliced = split.filter((item) => !!item).slice(startDepth)\n\n  const crumbs = sliced.map((path, idx) => {\n    // If homepage (e.g. \"en\"), set text to \"home\" translation\n    const text = supportedLanguages.includes(path)\n      ? translateMessageId(\"page-index-meta-title\", intl)\n      : translateMessageId(path, intl)\n\n    return {\n      fullPath: split.slice(0, idx + 2 + startDepth).join(\"/\") + \"/\",\n      text: text.toUpperCase(),\n    }\n  })\n\n  return (\n    <List className={className} dir={\"auto\"}>\n      {crumbs.map((crumb, idx) => (\n        <ListItem key={idx}>\n          <Crumb>\n            <CrumbLink\n              to={crumb.fullPath}\n              isPartiallyActive={slug === crumb.fullPath}\n            >\n              {crumb.text}\n            </CrumbLink>\n            {idx < crumbs.length - 1 && <Slash>/</Slash>}\n          </Crumb>\n        </ListItem>\n      ))}\n    </List>\n  )\n}\n\nexport default Breadcrumbs\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { useIntl } from \"gatsby-plugin-intl\"\nimport { Location } from \"@reach/router\"\nimport { getSrc } from \"gatsby-plugin-image\"\n\nimport { translateMessageId, languageMetadata } from \"../utils/translations\"\n\nconst supportedLanguages = Object.keys(languageMetadata)\n\nconst PageMetadata = ({ description, meta, title, image, canonicalUrl }) => {\n  const {\n    site,\n    ogImageDefault,\n    ogImageDevelopers,\n    ogImageDapps,\n    ogImageEthtwo,\n  } = useStaticQuery(\n    graphql`\n      {\n        site {\n          siteMetadata {\n            author\n            url\n          }\n        }\n        ogImageDefault: file(relativePath: { eq: \"home/hero.png\" }) {\n          childImageSharp {\n            gatsbyImageData(\n              width: 1200\n              layout: FIXED\n              placeholder: BLURRED\n              quality: 100\n            )\n          }\n        }\n        ogImageDevelopers: file(relativePath: { eq: \"enterprise-eth.png\" }) {\n          childImageSharp {\n            gatsbyImageData(\n              width: 1200\n              layout: FIXED\n              placeholder: BLURRED\n              quality: 100\n            )\n          }\n        }\n        ogImageDapps: file(relativePath: { eq: \"doge-computer.png\" }) {\n          childImageSharp {\n            gatsbyImageData(\n              width: 1200\n              layout: FIXED\n              placeholder: BLURRED\n              quality: 100\n            )\n          }\n        }\n        ogImageEthtwo: file(relativePath: { eq: \"eth2/eth2_doge.png\" }) {\n          childImageSharp {\n            gatsbyImageData(\n              width: 1200\n              layout: FIXED\n              placeholder: BLURRED\n              quality: 100\n            )\n          }\n        }\n      }\n    `\n  )\n\n  const intl = useIntl()\n\n  const desc = description || translateMessageId(\"site-description\", intl)\n\n  const siteTitle = translateMessageId(\"site-title\", intl)\n\n  return (\n    <Location>\n      {({ location }) => {\n        /* Set canonical URL w/ language path to avoid duplicate content */\n        /* e.g. set ethereum.org/about/ to ethereum.org/en/about/ */\n        const { pathname } = location\n        let canonicalPath = pathname\n        const firstDirectory = canonicalPath.split(\"/\")[1]\n        if (!supportedLanguages.includes(firstDirectory)) {\n          canonicalPath = `/en${pathname}`\n        }\n        const canonical =\n          canonicalUrl || `${site.siteMetadata.url}${canonicalPath}`\n\n        /* Set fallback ogImage based on path */\n        const siteUrl = site.siteMetadata.url\n        let ogImage = getSrc(ogImageDefault)\n        if (pathname.includes(\"/developers/\")) {\n          ogImage = getSrc(ogImageDevelopers)\n        }\n        if (pathname.includes(\"/dapps/\")) {\n          ogImage = getSrc(ogImageDapps)\n        }\n        if (pathname.includes(\"/eth2/\")) {\n          ogImage = getSrc(ogImageEthtwo)\n        }\n        if (image) {\n          ogImage = image\n        }\n        const ogImageUrl = `${siteUrl}${ogImage}`\n\n        return (\n          <Helmet\n            htmlAttributes={{ lang: intl.locale }}\n            title={title}\n            titleTemplate={`%s | ${siteTitle}`}\n            link={[{ rel: \"canonical\", key: canonical, href: canonical }]}\n            meta={[\n              {\n                name: `description`,\n                content: desc,\n              },\n              {\n                name: `image`,\n                content: site.siteMetadata.image,\n              },\n              {\n                property: `og:title`,\n                content: `${title} | ${siteTitle}`,\n              },\n              {\n                property: `og:description`,\n                content: desc,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary_large_image`,\n              },\n              {\n                name: `twitter:creator`,\n                content: site.siteMetadata.author,\n              },\n              {\n                name: `twitter:site`,\n                content: site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: `${title} | ${siteTitle}`,\n              },\n              {\n                name: `twitter:description`,\n                content: desc,\n              },\n              {\n                name: `twitter:image`,\n                content: ogImageUrl,\n              },\n              {\n                property: `og:url`,\n                content: siteUrl,\n              },\n              {\n                property: `og:image`,\n                content: ogImageUrl,\n              },\n              {\n                property: `og:video`,\n                content: `https://www.youtube.com/channel/UCNOfzGXD_C9YMYmnefmPH0g`,\n              },\n              {\n                property: `og:site_name`,\n                content: `ethereum.org`,\n              },\n            ].concat(meta)}\n          >\n            <script type=\"application/ld+json\">\n              {`\n        {\n          \"@context\": \"https://schema.org\",\n          \"@type\": \"Organization\",\n          \"url\": \"https://ethereum.org\",\n          \"email\": \"press@ethereum.org\",\n          \"name\": \"Ethereum\",\n          \"logo\": \"https://ethereum.org/og-image.png\"\n        }\n      `}\n            </script>\n          </Helmet>\n        )\n      }}\n    </Location>\n  )\n}\n\nPageMetadata.defaultProps = {\n  description: ``,\n  meta: [],\n  image: ``,\n  title: ``,\n}\n\nPageMetadata.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  image: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default PageMetadata\n"],"names":["Crumb","styled","List","ListItem","Slash","props","theme","colors","textTableOfContents","CrumbLink","Link","primary","slug","startDepth","className","intl","useIntl","split","crumbs","filter","item","slice","map","path","idx","text","supportedLanguages","translateMessageId","fullPath","join","toUpperCase","dir","crumb","key","to","isPartiallyActive","length","Object","keys","languageMetadata","PageMetadata","description","meta","title","image","canonicalUrl","useStaticQuery","site","ogImageDefault","ogImageDevelopers","ogImageDapps","ogImageEthtwo","desc","siteTitle","Location","pathname","location","canonicalPath","firstDirectory","includes","canonical","siteMetadata","url","siteUrl","ogImage","getSrc","ogImageUrl","Helmet","htmlAttributes","lang","locale","titleTemplate","link","rel","href","name","content","property","author","concat","type","defaultProps"],"sourceRoot":""}